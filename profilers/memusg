#!/usr/bin/env bash

set -um

usage() {
    echo "Usage: $0 --label <label> <command> [args...]" >&2
    exit 1
}

# Parse arguments
label=""
while [[ $# -gt 0 ]]; do
    case "$1" in
        --label)
            if [[ -z "$2" ]]; then
                usage
            fi
            label="$2"
            shift 2
            ;;
        *)
            break
            ;;
    esac
done

if [[ -z "$label" || $# -eq 0 ]]; then
    usage
fi

# Function to get memory usage of a process and its children
get_memory() {
    local pid=$1
    local mem=0
    local child_mem=0

    # Get memory of the process
    mem=$(ps -o rss= -p $pid | awk '{print $1}')

    # Get memory of child processes
    for child in $(pgrep -P $pid); do
        child_mem=$(get_memory $child)
        mem=$((mem + child_mem))
    done

    echo $mem
}

# Run the command in background
"$@" &
pid=$!

# Monitor memory usage
peak_memory=0
while kill -0 $pid 2>/dev/null; do
    current_memory=$(get_memory $pid)
    if [[ $current_memory -gt $peak_memory ]]; then
        peak_memory=$current_memory
    fi
    sleep 0.1
done

# Wait for the command to finish and get its exit code
wait $pid
exit_code=$?

# Get the current timestamp
timestamp=$(date +%Y%m%d_%H%M%S)

# Write the memory peak to a file
mkdir -p out
output_file="out/memusg.$label.$timestamp"
if [[ $exit_code -ne 0 ]]; then
    output_file="${output_file}.FAILED"
fi
echo "$peak_memory" > "$output_file"

echo "Profile saved to $output_file"
exit $exit_code
